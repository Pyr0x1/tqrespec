/*
 * Copyright (C) 2017 Emerson Pinter - All Rights Reserved
 */

group 'br.com.pinter.tqrespec'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
        classpath 'org.openjfx:javafx-plugin:0.0.7'
    }
}

sourceSets {
    main.output.resourcesDir = main.java.outputDir
}

version = '0.4.0'
sourceCompatibility = 11
targetCompatibility = 11
ext.moduleName = 'br.com.pinter.tqrespec'
ext.javahome = System.properties['java.home']
ext.moduleInfoPresent = false
ext.javafxSdkLibDir = new File(projectDir,'sdk/javafx-sdk-11/lib')
ext.javafxSdkBinDir = new File(projectDir,'sdk/javafx-sdk-11/bin')
ext.patchjarDir = new File(buildDir, '/patchedjar')
apply from: "patchModulesJar.gradle"
if (file('src/main/java/module-info.java').exists()) {
    ext.moduleInfoPresent = true
    mainClassName = "$moduleName/br.com.pinter.tqrespec.core.Main"
} else {
    mainClassName = "br.com.pinter.tqrespec.core.Main"
}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile fileTree(dir: javafxSdkLibDir, include: '*.jar')
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.28.2'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.2'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
    compile group: 'com.google.inject', name: 'guice', version: '4.2.2'
    compile group: 'net.java.dev.jna', name: 'jna-platform', version: '5.3.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile project(':tqdatabase')
}

jar {
    manifest {
        attributes('Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Implementation-Version': project.version,
                'Automatic-Module-Name': moduleName,
                'Main-Class': 'br.com.pinter.tqrespec.core.Main')
    }
//    from('src/main/resources/META-INF')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    version = null
}

task copyMetaInf(type: Copy) {
    from fileTree(new File(sourceSets.main.output.resourcesDir, '/META-INF'))
    into new File(sourceSets.main.java.outputDir, '/META-INF')
}

if (moduleInfoPresent) {
    compileJava {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--patch-module', "$moduleName=" + files(sourceSets.main.resources.srcDirs).asPath,
            ]
            classpath = files()
        }
    }

    run {
        inputs.property("moduleName", moduleName)
        doFirst {
            jvmArgs = [
                    '--module-path', classpath.asPath,
                    '--module', mainClassName,
                    '--patch-module', "$moduleName=" + files(sourceSets.main.output.resourcesDir).asPath
            ]
            classpath = files()
        }
    }
} else {
    run {
        doFirst {
            jvmArgs = [
                    '--module-path', javafxSdkLibDir,
                    '--add-modules', 'javafx.base,javafx.fxml,javafx.graphics,javafx.controls'
            ]
        }
    }
}

task copyToLib(type: Copy) {
    doFirst {
        mkdir "$buildDir/jardist"
    }
    from(configurations.compile.findAll { !it.getName().matches("javafx.*.jar") }).collect { it.getPath() }

    from jar
    into "$buildDir/jardist"
}

copyToLib.dependsOn(jar)
classes.dependsOn('copyMetaInf')

task copyJarsToModuleDeps(type: Copy) {
    from project(':tqdatabase').configurations.compile
    from project.configurations.compile
    into patchjarDir
}

task patchModulesJar(type: PatchJarModuleTask) {
    dependsOn 'copyJarsToModuleDeps'
    delete = true
    tempPatchDir = new File(buildDir, '/temppatch')
    tempJarDir = patchjarDir
    moduleDeps = ['com.sun.jna.platform': 'com.sun.jna', 'cdi.api': 'javax.inject,javax.interceptor,javax.el']
}

task copyAppimageFiles(type: Copy) {
    dependsOn(jar)
    doFirst {
        mkdir "$buildDir/appimage-files"
    }
    if (!moduleInfoPresent) {
        from project(':tqdatabase').tasks.jar.outputs.files.collect { it.getPath() }
    }
    from(configurations.compile.findAll {
        !it.getName().matches("javafx.*.jar") && !it.getName().matches("tqdatabase.*.jar")
    }).collect { it.getPath() }
    from jar
    into "$buildDir/appimage-files"
}

task copyAppimageModules(type: Copy) {
    if (moduleInfoPresent) {
        dependsOn(patchModulesJar)
    }

    dependsOn(jar)
    doFirst {
        mkdir "$buildDir/appimage-modules"
    }
    from project(':tqdatabase').tasks.jar.outputs.files.collect { it.getPath() }
    if (moduleInfoPresent) {
        from patchjarDir
        from jar
    }
    into "$buildDir/appimage-modules"
}

task jlink(type: Exec) {
    dependsOn clean
    dependsOn 'jar'
    dependsOn 'tqdatabase:jar'
    dependsOn 'copyToLib'
    dependsOn 'copyJarsToModuleDeps'
    if (!moduleInfoPresent) {
        dependsOn 'copyAppimageFiles'
    }
    dependsOn 'copyAppimageModules'
    workingDir buildDir

    if (moduleInfoPresent) {
        commandLine "${javahome}/bin/jlink.exe",
                '--module-path', "${javafxSdkLibDir}" + File.pathSeparator + "${buildDir}/appimage-modules",
                '--add-modules', ("org.apache.commons.lang3,br.com.pinter.tqdatabase,br.com.pinter.tqrespec,com.sun.jna,com.sun.jna.platform,javafx.base,javafx.fxml,javafx.graphics,javafx.controls,java.prefs,java.base,jdk.zipfs,jdk.unsupported,java.logging"),
                '--output', new File(buildDir, '/jre-image'),
                '--strip-debug',
                '--compress', '2',
                '--no-header-files',
                '--no-man-pages'
    } else {
        commandLine "${javahome}/bin/jlink.exe",
                '--module-path', "${javafxSdkLibDir}" + File.pathSeparator + "${buildDir}/appimage-modules",
                '--add-modules', ("javafx.base,javafx.fxml,javafx.graphics,javafx.controls,java.prefs,java.base,jdk.zipfs,jdk.unsupported,java.logging"),
                '--output', new File(buildDir, '/jre-image'),
                '--strip-debug',
                '--compress', '2',
                '--no-header-files',
                '--no-man-pages'
    }
}

task appimage(type: Exec) {
    dependsOn 'jlink'
    workingDir buildDir
//    def tqdatabaseDeps = project(':tqdatabase').configurations.compile.collect { it.getPath() }
//            .join(File.pathSeparatorChar.toString())
//    def tqdatabaseJar = project(':tqdatabase').tasks.jar.outputs.files.collect { it.getPath() }
//            .join(File.pathSeparatorChar.toString())

//    def modulePath = (configurations.compile.findAll{ !it.getName().matches("javafx.*.jar") }).collect { it.getPath() }.join(';')
//    def modulePath = 'build/jardist;libs'
//    System.err.println(modulePath)
//    "c:/windows/system32/cmd.exe","/c","echo",
    if (moduleInfoPresent) {
        commandLine "${javahome}/bin/java.exe",
                "-Xmx1024M",
                '--module-path', "${javahome}/jmods",
                '--add-opens', 'jdk.jlink/jdk.tools.jlink.internal.packager=jdk.packager',
                '--module', "jdk.packager/jdk.packager.Main",
                'create-image',
                '--verbose',
                '--echo-mode',
                '--singleton',
                '--runtime-image', new File(buildDir, "jre-image"),
                '--module', 'br.com.pinter.tqrespec',
                '--output', new File(buildDir, '/app-image'),
                '--name', 'TQRespec',
                '--icon', "${projectDir}/src/main/resources/icon/icon64.ico",
                '--version', project.version,
                '--vendor', 'Emerson Pinter',
                '--input', new File(buildDir, '/appimage-files'),
                '--description', 'The respec tool for Titan Quest game',
                '--class', "br.com.pinter.tqrespec.core.Main",
                '--jvm-args', '--add-opens javafx.base/com.sun.javafx.reflect=ALL-UNNAMED'
    } else {
        commandLine "${javahome}/bin/java.exe",
                "-Xmx1024M",
                '--module-path', "${javahome}/jmods",
                '--add-opens', 'jdk.jlink/jdk.tools.jlink.internal.packager=jdk.packager',
                '--module', "jdk.packager/jdk.packager.Main",
                'create-image',
                '--verbose',
                '--echo-mode',
                '--singleton',
                '--module-path', "$buildDir/appimage-files",
                '--runtime-image', new File(buildDir, "jre-image"),
                '--input', new File(buildDir, '/appimage-files'),
                '--main-jar', jar.outputs.files.collect { it.getName() }.get(0),
                '--output', new File(buildDir, '/app-image'),
                '--name', 'TQRespec',
                '--icon', "${projectDir}/src/main/resources/icon/icon64.ico",
                '--version', project.version,
                '--vendor', 'Emerson Pinter',
                '--description', 'The respec tool for Titan Quest game',
                '--class', "br.com.pinter.tqrespec.core.Main",
                '--jvm-args', '--add-opens javafx.base/com.sun.javafx.reflect=ALL-UNNAMED'
    }
    doLast {
        copy {
            from javafxSdkBinDir.listFiles()
            into "$buildDir/app-image/tqrespec"
        }
        new File(buildDir, "jre-image").deleteDir()
    }
}