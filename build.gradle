/*
 * Copyright (C) 2017 Emerson Pinter - All Rights Reserved
 */

group 'br.com.pinter.tqrespec'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.sonarqube'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
        classpath 'org.openjfx:javafx-plugin:0.0.7'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
    }
}

sourceSets {
    main.output.resourcesDir = main.java.outputDir
}

ext.distAppName = 'TQRespec'
version = '0.8.0'
sourceCompatibility = 14
ext.moduleName = 'br.com.pinter.tqrespec'
ext.javahome = System.properties['java.home']
ext.moduleInfoPresent = false
ext.javafxSdkLibDir = new File(projectDir, 'sdk/javafx-sdk-14/lib')
ext.javafxSdkBinDir = new File(projectDir, 'sdk/javafx-sdk-14/bin')
ext.patchjarDir = new File(buildDir, '/patchedjar')
ext.patchJars = false
apply from: "gradle/patchModulesJar.gradle"
if (file('src/main/java/module-info.java').exists()) {
    ext.moduleInfoPresent = true
}
mainClassName = "br.com.pinter.tqrespec.Main"

if(project.hasProperty('buildVersion')) {
    project.version = project.properties['buildVersion']
}

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation fileTree(dir: javafxSdkLibDir, include: '*.jar')
    implementation group: 'com.google.inject', name: 'guice', version: '4.2.3'
    implementation group: 'net.java.dev.jna', name: 'jna-platform', version: '5.3.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation project(':tqdatabase')

    testImplementation group: 'junit', name: 'junit', version: '4.13'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.3.3'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.7'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.7'
    testImplementation group: 'com.google.inject', name: 'guice', version: '4.2.3'
}

import org.apache.tools.ant.taskdefs.condition.Os;

if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    ext.binjlink = javahome + "/bin/jlink.exe"
    ext.binjpackage = javahome + "/bin/jpackage.exe"
} else {
    ext.binjlink = javahome + "/bin/jlink"
    ext.binjpackage = javahome + "/bin/jpackage"
}

jar {
    manifest {
        attributes('Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Implementation-Title': distAppName,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': moduleName,
                'Main-Class': 'br.com.pinter.tqrespec.Main')
    }
//    from('src/main/resources/META-INF')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task copyMetaInf(type: Copy) {
    from fileTree(new File(sourceSets.main.output.resourcesDir, '/META-INF'))
    into new File(sourceSets.main.java.outputDir, '/META-INF')
}

if (moduleInfoPresent) {
    compileJava {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--patch-module', "$moduleName=" + files(sourceSets.main.resources.srcDirs).asPath,
            ]
            classpath = files()
        }
    }

    run {
        inputs.property("moduleName", moduleName)
        doFirst {
            jvmArgs = [
                    '-XX:+UseSerialGC','-XX:MinHeapFreeRatio=10','-XX:MaxHeapFreeRatio=15',
                    '--add-reads', 'br.com.pinter.tqrespec=ALL-UNNAMED',
                    '--add-opens', 'javafx.base/com.sun.javafx.reflect=ALL-UNNAMED',
                    '--add-opens', 'br.com.pinter.tqrespec/br.com.pinter.tqrespec=ALL-UNNAMED',
                    '--add-opens', 'br.com.pinter.tqrespec/br.com.pinter.tqrespec.core=ALL-UNNAMED',
                    '--add-opens', 'br.com.pinter.tqrespec/br.com.pinter.tqrespec.tqdata=ALL-UNNAMED',
                    '--add-opens', 'br.com.pinter.tqrespec/br.com.pinter.tqrespec.gui=ALL-UNNAMED',
                    '--add-opens', 'br.com.pinter.tqrespec/br.com.pinter.tqrespec.save.player=ALL-UNNAMED',
                    '--add-opens', 'br.com.pinter.tqrespec/br.com.pinter.tqrespec.save=ALL-UNNAMED',
                    '--add-opens','java.base/java.lang=ALL-UNNAMED',
                    '--module-path', classpath.asPath,
                    '--class-path', classpath.asPath,
                    '--module', moduleName,
                    '--patch-module', "$moduleName=" + files(sourceSets.main.output.resourcesDir).asPath,
            ]
            classpath = files()
        }
    }
} else {
    run {
        doFirst {
            jvmArgs = [
                    '-XX:+UseSerialGC','-XX:MinHeapFreeRatio=10','-XX:MaxHeapFreeRatio=15',
                    '--module-path', javafxSdkLibDir,
                    '--add-modules', 'javafx.base,javafx.fxml,javafx.graphics,javafx.controls',
            ]
        }
    }
}

task copyToLib(type: Copy) {
    doFirst {
        mkdir "$buildDir/jardist"
    }
    from(configurations.runtimeClasspath.findAll { !it.getName().matches("javafx.*\\.jar") }).collect { it.getPath() }

    from jar
    into "$buildDir/jardist"
}

copyToLib.dependsOn(jar)
classes.dependsOn('copyMetaInf')

task copyJarsToModuleDeps(type: Copy) {
    from project(':tqdatabase').configurations.compileClasspath
    from project.configurations.compile
    into patchjarDir
}

task patchModulesJar(type: PatchJarModuleTask) {
    dependsOn 'copyJarsToModuleDeps'
    delete = true
    tempPatchDir = new File(buildDir, '/temppatch')
    tempJarDir = patchjarDir
    moduleDeps = ['com.sun.jna.platform': 'com.sun.jna']
}

task copyAppimageFiles(type: Copy) {
    dependsOn(jar)
    dependsOn 'tqdatabase:jar'
    doFirst {
        mkdir "$buildDir/appimage-files"
    }
    if (!moduleInfoPresent) {
        from project(':tqdatabase').tasks.jar.outputs.files.collect { it.getPath() }
        from jar
    }
    from(configurations.runtimeClasspath.findAll {
        !it.getName().matches("javafx.*.jar") && !it.getName().matches("tqdatabase.*.jar")
    }).collect { it.getPath() }
    into "$buildDir/appimage-files"
}

task copyAppimageModules(type: Copy) {
    if (patchJars) {
        dependsOn(patchModulesJar)
    }

    dependsOn(jar)
    dependsOn 'tqdatabase:jar'
    doFirst {
        mkdir "$buildDir/appimage-modules"
    }
    from project(':tqdatabase').tasks.jar.outputs.files.collect { it.getPath() }
    if (moduleInfoPresent) {
        if (patchJars) {
            from patchjarDir
        }
        from jar
    }
    into "$buildDir/appimage-modules"
}

task jlink(type: Exec) {
    dependsOn clean
    dependsOn 'copyToLib'
    dependsOn 'copyJarsToModuleDeps'
    if (!patchJars) {
        dependsOn 'copyAppimageFiles'
    }
    dependsOn 'copyAppimageModules'
    workingDir buildDir

    if (moduleInfoPresent) {
        commandLine binjlink,
                '-J-Djlink.debug=true',
                '--module-path', "${javafxSdkLibDir}" + File.pathSeparator + "${buildDir}/appimage-modules",
                '--add-modules', ("br.com.pinter.tqdatabase,br.com.pinter.tqrespec,javafx.base,javafx.fxml,javafx.graphics,javafx.controls,java.prefs,java.base,jdk.zipfs,jdk.unsupported,java.logging"),
                '--output', new File(buildDir, '/jre-image'),
                '--compress', '2',
                '--no-header-files',
                '--no-man-pages',
                '--strip-native-commands'
    } else {
        commandLine binjlink,
                '--module-path', "${javafxSdkLibDir}" + File.pathSeparator + "${buildDir}/appimage-modules",
                '--add-modules', ("javafx.base,javafx.fxml,javafx.graphics,javafx.controls,java.prefs,java.base,jdk.zipfs,jdk.unsupported,java.logging"),
                '--output', new File(buildDir, '/jre-image'),
                '--compress', '2',
                '--no-header-files',
                '--no-man-pages',
                '--strip-native-commands'
    }
}

task archiveAppimage(type: Zip) {
    dependsOn 'appimage'
    from "${buildDir}/app-image"
    archiveFileName = "${distAppName}-${project.version}.zip"
    destinationDirectory = file("$buildDir")
}

task appimage(type: Exec) {
    dependsOn 'jlink'
    workingDir buildDir
    if (moduleInfoPresent) {
        commandLine binjpackage,
                '--type','app-image',
                '--verbose',
                '--runtime-image', "${buildDir}/jre-image",
                '--module', "${moduleName}/${mainClassName}",
                '--dest', "${buildDir}/app-image",
                '--name', distAppName,
                '--icon', "${projectDir}/src/main/resources/icon/icon64.ico",
                '--app-version', project.version,
                '--vendor', 'Emerson Pinter',
                '--input', "${buildDir}/appimage-files",
                '--description', 'The respec tool for Titan Quest game',
                '--java-options',
                '-XX:+UseSerialGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=15 ' +
                '--add-opens javafx.base/com.sun.javafx.reflect=ALL-UNNAMED ' +
                '--add-opens br.com.pinter.tqrespec/br.com.pinter.tqrespec=ALL-UNNAMED ' +
                '--add-opens br.com.pinter.tqrespec/br.com.pinter.tqrespec.core=ALL-UNNAMED ' +
                '--add-opens br.com.pinter.tqrespec/br.com.pinter.tqrespec.tqdata=ALL-UNNAMED ' +
                '--add-opens br.com.pinter.tqrespec/br.com.pinter.tqrespec.gui=ALL-UNNAMED ' +
                '--add-opens br.com.pinter.tqrespec/br.com.pinter.tqrespec.save.player=ALL-UNNAMED ' +
                '--add-opens br.com.pinter.tqrespec/br.com.pinter.tqrespec.save=ALL-UNNAMED ' +
                '--add-opens java.base/java.lang=ALL-UNNAMED ' +
                '--add-reads br.com.pinter.tqrespec=ALL-UNNAMED'
    } else {
        commandLine binjpackage,
                '--type','app-image',
                '--verbose',
                '--runtime-image', "${buildDir}/jre-image",
                '--dest', "${buildDir}/app-image",
                '--name', distAppName,
                '--icon', "${projectDir}/src/main/resources/icon/icon64.ico",
                '--app-version', project.version,
                '--vendor', 'Emerson Pinter',
                '--input', "${buildDir}/appimage-files",
                '--description', 'The respec tool for Titan Quest game',
                '--main-jar', jar.outputs.files.collect { it.getName() }.get(0),
                '--main-class', mainClassName,
                '--java-options',
                '-XX:+UseSerialGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=15 ' +
                        '--add-opens javafx.base/com.sun.javafx.reflect=ALL-UNNAMED ' +
                        '--add-opens java.base/java.lang=ALL-UNNAMED '
    }
    doLast {
        copy {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                from javafxSdkBinDir.listFiles().findAll {
                    it.getName().equals("decora_sse.dll") ||
                            it.getName().equals("fxplugins.dll") ||
                            it.getName().equals("glass.dll") ||
                            it.getName().equals("javafx_font.dll") ||
                            it.getName().equals("javafx_iio.dll") ||
                            it.getName().equals("prism_common.dll") ||
                            it.getName().equals("prism_d3d.dll") ||
                            it.getName().equals("prism_sw.dll")
                }.collect()
                into "$buildDir/app-image/${distAppName}"
            } else {
                from javafxSdkLibDir.listFiles().findAll { it.getName().endsWith('.so') }.collect()
                into "$buildDir/app-image/${distAppName}"
            }
        }
        new File(buildDir, "app-image/${distAppName}/jfxwebkit.dll").delete()
        new File(buildDir, "app-image/${distAppName}/ucrtbase.dll").delete()
        new File(buildDir, "app-image/${distAppName}/gstreamer-lite.dll").delete()
        new File(buildDir, "app-image/${distAppName}/glib-lite.dll").delete()
        new File(buildDir, "jre-image").deleteDir()
    }
}

clean.dependsOn subprojects.collect { it.tasks.matching { it.name == 'clean' } }